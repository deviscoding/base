
@function get-expression-operator($expression) {
  @each $operator in ('>=', '<=', '>', '<', '≥', '≤', '=') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }
}

@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));
  @return $value;
}

@function get-condition-string($viewport,$operator) {
  @each $class, $min in $grid-breakpoints {
    @if($class == $viewport) {
      $max: map-get-next($grid-breakpoints,$class, 0);
      @if $operator == '≥' {  $operator: '>='; }
      @if $operator == '≤' {  $operator: '<='; }
      @if $operator == '=' {
        @if $max > 0 {
          @return ' (min-width: ' + $min + ') and (max-width: ' + $max + ')';
        } @else {
          @return ' (min-width: ' + $min + ')';
        }
      } @else if $operator == '<' {
        @return ' (max-width: ' + ($min - 1) + ')';
      } @else if $operator == '>' {
        @return ' (min-width: ' + ($max + 1) + ')';
      } @else if $operator == '<=' {
        @return ' (max-width: ' + $max + ')';
      } @else if $operator == '>=' {
        @return ' (min-width: ' + $min + ')';
      }
    }
  }

  @return '';
}

// Used with @include media("<sm",">xs") etc.
@mixin media($conditions...) {
  $condition-string: '';
  @each $condition in $conditions {
    $operator: get-expression-operator($condition);
    $value: get-expression-value($condition, $operator);
    $condition-string: $condition-string + get-condition-string($value,$operator);
  }
  @media screen and #{$condition-string} {
    @content
  }
}

@mixin media-breakpoint-up($bp) {
  @include media(">=#{$bp}") {
    @content;
  }
}

@mixin media-breakpoint-down($bp) {
  @include media("<=#{$bp}") {
    @content;
  }
}

@mixin touch() {
  html.touch {
    @content;
  }
}

@mixin fallback() {
  html.fallback {
    @content;
  }
}

@mixin baseline() {
  html.baseline {
    @content;
  }
}