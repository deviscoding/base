@import "root-variables";

// region ///////////////////////////////////////////////////////////////   Unit Functions

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function computed($size) {
  @if unit($size) == rem {
    @if variable_exists(font-size-root) == false {
      @error 'You must set the $font-size-root variable prior to the first usage of the `computed` function.';
    }
    $size: (strip-unit($size) * strip-unit($font-size-root)) * 1px;
  }

  @return $size;
}

@function font-size-computed($fnt-size-root, $fnt-size-base) {
  @if unit($fnt-size-base) == px {
    @return $fnt-size-base;
  }

  @return (strip-unit($fnt-size-root) * strip-unit($fnt-size-base)) * 1px;
}

// endregion ////////////////////////////////////////////////////////////   End Unit Functions

// region ///////////////////////////////////////////////////////////////   String Functions

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// endregion ////////////////////////////////////////////////////////////   End String Functions

// region ///////////////////////////////////////////////////////////////   Map Functions

@function map-deep-get($map, $keys...) {
  @if type_of($map) == map {
    @each $key in $keys {
      @if type_of($map) == map {
        $map: map-get($map, $key);
      } @else {
        @warn ("Key #{$key} does not contain a map.");
      }
    }
  } @else {
    @warn ("Argument provided to map-deep-get is not a map!");
  }

  @return $map;
}

@function map-get-next($map, $key, $fallback: false) {

  // Check if map is valid
  @if type_of($map) == map {

    // Check if key exists in map
    @if map_has_key($map, $key) {

      // Init index counter variable
      $i: 0;

      // Init key index
      $key-index: false;

      // Traverse map for key
      @each $map-key, $map-value in $map {
        // Update index
        $i: $i + 1;

        // If map key found, set key index
        @if $map-key == $key {
          $key-index: $i;
        }

        // If next index return next value
        @if $i == $key-index + 1 {
          @return $map-value;
        }

        // If last entry return false
        @if $i == length($map) {
          @return $fallback;
        }
      }

      @warn 'No next map item for key #{$key}';
      @return $fallback;
    }

    @warn 'No valid key #{$key} in map';
    @return $fallback;
  }

  @warn 'No valid map';
  @return $fallback;
}

// endregion ////////////////////////////////////////////////////////////   End Map Functions

// region ///////////////////////////////////////////////////////////////   Constant Functions

/// Constant Getter - Credit to https://twitter.com/HugoGiraudel
///
/// @param    {String} $name          Name of constant to get
///
/// @return   {*}                     Constant value
/// @require            $CONSTANTS
/// @throw    'Unknown constant `#{$name}`.'
@function const($name) {
  @if not map-has-key($CONSTANTS, $name) {
    @error 'Unknown constant `#{$name}`.';
  }

  @return map-get($CONSTANTS, $name);
}

// endregion ////////////////////////////////////////////////////////////   End Constant Functions

// region ///////////////////////////////////////////////////////////////   Other Functions

@function _get-space($size,$axis) {
  @if map-has-key($spacing,$size) {
    @return map-deep-get($spacing,$size,$axis);
  }

  @error 'The spacing map does not contain the size: `#{$size}`.';
}

@function _set-space($size,$axis,$value) {
  $spacing-temp: ();
  @if map-has-key($spacing,$size) {
    $spacing-temp: map-get($spacing, $size);
    $spacing: map-remove($spacing, $size);
  }
  @if map-has-key($spacing-temp, $axis) {
    $spacing-temp: map-remove($spacing-temp, $axis);
  }
  $spacing-temp: map-merge($spacing-temp, ($axis: $value));

  @return map-merge($spacing,$spacing-temp);
}

@function space-x($size) {
  @return _get-space($size, x);
}

@function space-y($size) {
  @return _get-space($size, x);
}

@function set-space-x($size,$value) {
  @return _set-space($size, x, $value);
}

@function set-space-y($size,$value) {
  @return _set-space($size, y, $value);
}

// endregion ////////////////////////////////////////////////////////////   End Other Functions
