// region ///////////////////////////////////////////////////////////////   Unit Functions

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function computed($size) {
  @if unit($size) == rem {
    @if variable_exists(font-size-root) == false {
      @error 'You must set the $font-size-root variable prior to the first usage of the `computed` function.';
    }
    $size: (strip-unit($size) * strip-unit($font-size-root)) * 1px;
  }

  @return $size;
}

@function font-size-computed($fnt-size-root, $fnt-size-base) {
  @if unit($fnt-size-base) == px {
    @return $fnt-size-base;
  }

  @return (strip-unit($fnt-size-root) * strip-unit($fnt-size-base)) * 1px;
}

// endregion ////////////////////////////////////////////////////////////   End Unit Functions

// region ///////////////////////////////////////////////////////////////   String Functions

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Converts 1 or more characters into a unicode
// @source - [@Stephn-R](https://github.com/sass/sass/issues/1395#issuecomment-57483844)
@function unicode($str){
  @return unquote("\"")+unquote(str-insert($str, "\\", 1))+unquote("\"");
}

// endregion ////////////////////////////////////////////////////////////   End String Functions

// region ///////////////////////////////////////////////////////////////   SVG Functions

// Encode symbols
@function url-encode($string) {
  $map: (
                "%": "%25",
                "<": "%3C",
                ">": "%3E",
                " ": "%20",
                "!": "%21",
                "*": "%2A",
                "'": "%27",
                '"': "%22",
                "(": "%28",
                ")": "%29",
                ";": "%3B",
                ":": "%3A",
                "@": "%40",
                "&": "%26",
                "=": "%3D",
                "+": "%2B",
                "$": "%24",
                ",": "%2C",
                "/": "%2F",
                "?": "%3F",
                "#": "%23",
                "[": "%5B",
                "]": "%5D"
        );

  $new: $string;

  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }

  @return $new;
}

// Format the SVG as a URL
@function inline-svg($string) {
  @return url('data:image/svg+xml,#{url-encode($string)}');
}

// endregion ////////////////////////////////////////////////////////////   End SVG String

// region ///////////////////////////////////////////////////////////////   Other Functions

@function breakpoint-infix($bp) {
  @if variable-exists(grid-breakpoints) == false {
    @error 'You must set the $grid-breakpoints map prior to the first usage of the `breakpoint-infix` function.';
  }
  @if map-has-key($grid-breakpoints, $bp) {
    $min: strip-unit(map-get($grid-breakpoints, $bp));
    @if $min > 0 {
      @return -#{$bp};
    }
  }

  @return null;
}

// endregion ////////////////////////////////////////////////////////////   End Other Functions

