@import "map";

// region ///////////////////////////////////////////////////////////////   Getter Functions

@function breakpoint($breakpoint) {
  @if map-has-key($grid-breakpoints,$breakpoint) {
    @return map-get($grid-breakpoints, $breakpoint);
  }

  @error "The breakpoint `#{$breakpoint} does not exist in the $grid-breakpoints map.";
}

@function container($breakpoint) {
  @if map-has-key($container-max-widths,$breakpoint) {
    @return map-get($container-max-widths, $breakpoint);
  }

  @error "The breakpoint `#{$breakpoint} does not exist in the $container-max-widths map.";
}

/// Constant Getter - Credit to https://twitter.com/HugoGiraudel
///
/// @param    {String} $name          Name of constant to get
///
/// @return   {*}                     Constant value
/// @require            $CONSTANTS
/// @throw    'Unknown constant `#{$name}`.'
@function const($name) {
  @if not map-has-key($CONSTANTS, $name) {
    @error 'Unknown constant `#{$name}`.';
  }

  @return map-get($CONSTANTS, $name);
}

@function feature($key) {
  @if map-has-key($features,$key) {
    @return map-get($features,$key);
  }

  @error "The feature `#{$key}` does not exist in the $features map.";
}

// region ///////////////////////////////////////////////////////////////   Other Functions

@function _get-space($size,$axis) {
  @if map-has-key($spacing,$size) {
    @return map-deep-get($spacing,$size,$axis);
  }

  @error 'The spacing map does not contain the size: `#{$size}`.';
}

@function space-x($size) {
  @return _get-space($size, x);
}

@function space-y($size) {
  @return _get-space($size, x);
}

// endregion ////////////////////////////////////////////////////////////   End Other Functions



// endregion ////////////////////////////////////////////////////////////   End Getter Functions

// region ///////////////////////////////////////////////////////////////   Setter Functions

@mixin set-feature($key,$value) {
  @if not(variable-exists(features)) {
    @error "You may not use the `set-feature` mixin prior without the $features map.  Please include `root-variables` prior to this usage."
  } @else {
    $features: set-map-key($features,$key,$value);
  }
}

@mixin set-breakpoint($breakpoint,$value) {
  @if not(variable-exists(grid-breakpoints)) {
    @error "You may not use the `set-breakpoint` mixin without the $grid-breakpoints map.  Please include `root-variables` prior to this usage."
  } @else {
    $grid-breakpoints: set-map-key($grid-breakpoints, $breakpoint, $value);
  }
}

@mixin set-max-width($breakpoint,$value) {
  @if not(variable-exists(grid-breakpoints)) {
    @error "You may not use the `set-max-width` mixin without the $container-max-widths map.  Please include `root-variables` prior to this usage."
  } @else {
    $container-max-widths: set-map-key($container-max-widths, $breakpoint, $value);
  }
}

@mixin _set-space($size,$axis,$value) {
  $spacing-temp: ();
  @if not(variable-exists(spacing)) {
    @error "You may not use the `set-space-*` mixins without the $spacing map.  Please include `root-variables` prior to this usage."
  } @else {
    @if map-has-key($spacing,$size) {
      $spacing-temp: map-get($spacing, $size);
      $spacing: map-remove($spacing, $size);
    }
    @if map-has-key($spacing-temp, $axis) {
      $spacing-temp: map-remove($spacing-temp, $axis);
    }
    $spacing-temp: map-merge($spacing-temp, ($axis: $value));

    $spacing: map-merge($spacing,$spacing-temp);
  }
}

@mixin set-space-x($size,$value) {
  @include _set-space($size, x, $value);
}

@mixin set-space-y($size,$value) {
  @include _set-space($size, y, $value);
}

// endregion ////////////////////////////////////////////////////////////   End Setter Functions
