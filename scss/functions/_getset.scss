@import "map";

// region ///////////////////////////////////////////////////////////////   Getter Functions

@function breakpoint($breakpoint) {
  @if map-has-key($grid-breakpoints,$breakpoint) {
    @return map-get($grid-breakpoints, $breakpoint);
  }

  @error "The breakpoint `#{$breakpoint} does not exist in the $grid-breakpoints map.";
}

@function container($breakpoint) {
  @if map-has-key($container-max-widths,$breakpoint) {
    @return map-get($container-max-widths, $breakpoint);
  }

  @error "The breakpoint `#{$breakpoint} does not exist in the $container-max-widths map.";
}

/// Constant Getter - Credit to https://twitter.com/HugoGiraudel
///
/// @param    {String} $name          Name of constant to get
///
/// @return   {*}                     Constant value
/// @require            $CONSTANTS
/// @throw    'Unknown constant `#{$name}`.'
@function const($name) {
  @if not map-has-key($CONSTANTS, $name) {
    @error 'Unknown constant `#{$name}`.';
  }

  @return map-get($CONSTANTS, $name);
}

@function component($c) {
  $cKey: quote($c);
  @if map-has-key($components, $cKey) {
    $component: map-get($components, $cKey);
    @if type-of($component) == "map" {
      @if map-has-key($component, "_enabled") {
        @return map-get($component, "_enabled");
      } @else {
        @error "The component `#{$c}` does not indicate whether or not it is enabled.";
      }
    } @else {
      @return $component;
    }
  }

  @error "The component `#{$c}` does not exist in the `$components` map.";
}

@function component-feature($c,$f) {
  $cKey: quote($c);
  @if not(map-has-key($components,$cKey)) {
    @error "The component `#{$c} does not seem to exist within the `$components` map."
  } @else {
    $component: map-get($components, $cKey);
    @if type-of($component) != "map" {
      @error "The component `#{$c}` does not have individual features.";
    } @else {
      $fKey: quote($f);
      @if not(map-has-key($component,$fKey)) {
        @error "The component `#{$c}` does not have a feature named `#{$f}`.";
      } @else {
        @return map-get($component, $fKey);
      }
    }
  }
}

@function theme($prop) {
  $pKey: quote($prop);
  @if (map-has-key($theme, $pKey)) {
    @return map-get($theme, $pKey);
  }

  @error "The property `#{$prop}` is not a key in the `$theme` map.";
}

// region ///////////////////////////////////////////////////////////////   Other Functions

@function _get-space($size,$axis) {
  @if map-has-key($spacing,$size) {
    @return map-deep-get($spacing,$size,$axis);
  }

  @error 'The spacing map does not contain the size: `#{$size}`.';
}

@function space-x($size) {
  @return _get-space($size, x);
}

@function space-y($size) {
  @return _get-space($size, y);
}

// endregion ////////////////////////////////////////////////////////////   End Other Functions

// endregion ////////////////////////////////////////////////////////////   End Getter Functions

// region ///////////////////////////////////////////////////////////////   Setter Functions

@mixin set-component($c,$v) {
  @if not(variable-exists(components)) {
    @error "You may not use the `set-component` mixin prior without the $components map.  Please include `root-variables` prior to this usage."
  } @else {
    @if type-of($v) != "bool" {
      @error "You may only set a component to TRUE or FALSE, indicating whether it is enabled";
    } @else {
      $cKey: quote($c);
      @if not(map-has-key($components,$cKey)) {
        $components: set-map-key($components, $cKey, $v) !global;
      } @else {
        $component: map-get($components, $cKey);
        @if type-of($component) == "map" {
          $component: set-map-key($component, "_enabled", $v);
          $components: set-map-key($components, $cKey, $component) !global;
        } @else {
          $components: set-map-key($components, $cKey, $v) !global;
        }
      }
    }
  }
}

@mixin set-component-feature($c, $f, $v) {
  @if not(variable_exists(components)) {
    @error "You may not use the `set-component-feature` mixin prior without the $components map.  Please include `root-variables` prior to this usage."
  } @else {
    @if type-of($v) != "bool" {
      @error "You may only set a component feature to TRUE or FALSE, indicating whether it is enabled";
    } @else {
      $cKey: quote($c);
      @if not(map-has-key($components, $cKey)) {
        @error "The component `#{$c} does not seem to exist in the `$components` map!";
      } @else {
        $component: map-get($components, $cKey);
        $fKey: quote($f);
        $new : null;
        @if type_of($component) != "map" {
          $new: ("_enabled": $component, $fKey: $v);
        } @else {
          $new: set-map-key($component,$fKey,$v);
        }

        $components: set-map-key($components, $cKey, $new) !global;
      }
    }
  }
}

@mixin set-theme($f,$v) {
  @if not(variable_exists(theme)) {
    @error "You may not use the `set-theme` mixin prior without the $theme map.  Please include `root-variables` prior to this usage."
  } @else {
    @if type-of($v) != "bool" {
      @error "You may only set a theme feature to TRUE or FALSE, indicating whether it is enabled";
    } @else {
      $fKey: quote($f);
      @if not(map-has-key($theme, $fKey)) {
        @error "The component `#{$f} does not seem to exist in the `$theme` map!";
      } @else {
        $theme: set-map-key($theme, $fKey, $v) !global;
      }
    }
  }
}

@mixin set-breakpoint($breakpoint,$value) {
  @if not(variable-exists(grid-breakpoints)) {
    @error "You may not use the `set-breakpoint` mixin without the $grid-breakpoints map.  Please include `root-variables` prior to this usage."
  } @else {
    $grid-breakpoints: set-map-key($grid-breakpoints, $breakpoint, $value) !global;
  }
}

@mixin set-max-width($breakpoint,$value) {
  @if not(variable-exists(grid-breakpoints)) {
    @error "You may not use the `set-max-width` mixin without the $container-max-widths map.  Please include `root-variables` prior to this usage."
  } @else {
    $container-max-widths: set-map-key($container-max-widths, $breakpoint, $value) !global;
  }
}

@mixin _set-space($size,$axis,$value) {
  $spacing-temp: ();
  @if not(variable-exists(spacing)) {
    @error "You may not use the `set-space-*` mixins without the $spacing map.  Please include `root-variables` prior to this usage."
  } @else {
    @if map-has-key($spacing,$size) {
      $spacing-temp: map-get($spacing, $size);
      $spacing: map-remove($spacing, $size) !global;
    }
    @if map-has-key($spacing-temp, $axis) {
      $spacing-temp: map-remove($spacing-temp, $axis);
    }
    $spacing-temp: map-merge($spacing-temp, ($axis: $value));

    $spacing: map-merge($spacing,$spacing-temp) !global;
  }
}

@mixin set-space-x($size,$value) {
  @include _set-space($size, x, $value);
}

@mixin set-space-y($size,$value) {
  @include _set-space($size, y, $value);
}

// endregion ////////////////////////////////////////////////////////////   End Setter Functions
